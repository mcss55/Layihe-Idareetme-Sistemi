package com.fym.layiheidareetmesistemi.View;

import com.fym.layiheidareetmesistemi.Core.DTO.Request.Employee.EmployeeRegistrationRequset;
import com.fym.layiheidareetmesistemi.Core.Enums.Role;
import com.fym.layiheidareetmesistemi.Core.Exceptions.Employee.EmployeeException;
import com.fym.layiheidareetmesistemi.Services.Concretes.Employee.EmployeeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Locale;


@Component
public class LoginScreen extends JFrame {
    private JPanel panel1;
    private JTextField username;
    private JPasswordField password;
    private JLabel girisLabel;
    private JLabel errorMsg;
    private JButton button;

    private EmployeeService employeeService;

    @Autowired
    public void setEmployeeService(EmployeeService employeeService) {
        this.employeeService = employeeService;
    }


    public LoginScreen() {
        setTitle("Layihə İdarəetmə Sistemi - Giriş");
        setContentPane(panel1);
        getContentPane().setPreferredSize(Toolkit.getDefaultToolkit().getScreenSize());
        pack();
        setResizable(false);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setVisible(true);
        errorMsg.setVisible(false);
        button.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (((username.getText() == null) || username.getText().isBlank()) || ((String.valueOf(password.getPassword()) == null) || String.valueOf(password.getPassword()).isBlank())) {
                    errorMsg.setText("Məlumatlar yalnışdır!");
                    errorMsg.setVisible(true);
                    errorMsg.setBackground(Color.RED);//
                    errorMsg.setForeground(Color.red);
                } else {
                    errorMsg.setText("");
                    EmployeeRegistrationRequset requset =
                            new EmployeeRegistrationRequset("Maqsud", "Safin", "Shovket", "mcss", "HR", "123qwe123", Role.ADMIN);
                    try {
                        employeeService.addEmployee(requset);
                    } catch (EmployeeException error) {
                        System.out.println(error.getMessage()); // Burda open dialog chixacaq. Heleki sout ile ishledek
                    }
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {

            }

            @Override
            public void mouseReleased(MouseEvent e) {

            }

            @Override
            public void mouseEntered(MouseEvent e) {

            }

            @Override
            public void mouseExited(MouseEvent e) {

            }
        });
        password.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    if (((username.getText() == null) || username.getText().isBlank()) || ((String.valueOf(password.getPassword()) == null) || String.valueOf(password.getPassword()).isBlank())) {
                        errorMsg.setText("Məlumatlar yalnışdır!");
                        errorMsg.setForeground(Color.red);
                        errorMsg.setVisible(true);
                        errorMsg.setBackground(Color.RED);
                    } else {
                        errorMsg.setText("");
                    }
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
            }
        });

    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        username = new JTextField();
        username.setPreferredSize(new Dimension(200, 30));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 0, 6, 0);
        panel1.add(username, gbc);
        password = new JPasswordField();
        password.setMaximumSize(new Dimension(2147483647, 2147483647));
        password.setMinimumSize(new Dimension(49, 30));
        password.setPreferredSize(new Dimension(200, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 0, 20, 0);
        panel1.add(password, gbc);
        girisLabel = new JLabel();
        Font girisLabelFont = this.$$$getFont$$$("Inter", -1, 36, girisLabel.getFont());
        if (girisLabelFont != null) girisLabel.setFont(girisLabelFont);
        girisLabel.setHorizontalAlignment(10);
        girisLabel.setHorizontalTextPosition(10);
        girisLabel.setText("Giriş");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.insets = new Insets(0, 0, 50, 0);
        panel1.add(girisLabel, gbc);
        button = new JButton();
        button.setContentAreaFilled(true);
        button.setFocusPainted(true);
        button.setFocusable(false);
        button.setHideActionText(false);
        button.setLabel("Giriş et");
        button.setOpaque(true);
        button.setRolloverEnabled(true);
        button.setText("Giriş et");
        button.setVerifyInputWhenFocusTarget(true);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 0, 70, 0);
        panel1.add(button, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(panel2, gbc);
        errorMsg = new JLabel();
        errorMsg.setBackground(new Color(-65507));
        Font errorMsgFont = this.$$$getFont$$$("Inter", Font.BOLD, -1, errorMsg.getFont());
        if (errorMsgFont != null) errorMsg.setFont(errorMsgFont);
        errorMsg.setForeground(new Color(-65525));
        errorMsg.setText("Məlumatlar yalnışdır");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel2.add(errorMsg, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel2.add(spacer2, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
